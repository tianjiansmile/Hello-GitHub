
社交网络的设计
    1，异构网络：已目前金盘现有的数据，通话记录，设备号，地址，公司名，按照传统的设计，已人为主要节点，其他数据为人的资源节点构建，人和各种资源之间的社交网络关系
	
	2，同构网络：节点只限制为人，人与人之间的关系通过通话，拥有同一地址，公司设备来连接，构建以人为中心的同构社交网络。
	
	3，同构网络：考虑的人与人之间的交互，以目前我们拥有的数据来看，通话记录是最能体现人际网络的，考虑纯电话社交网络。
	   第一种异构社交网络的缺陷是网络复杂，网络只能表现出在我们数据范围之内的用户，而往往欺诈网络中的中间联系人可能并不参与借款，类似于欺诈中介这一类
	   机构，和平台欺诈申请用户应该有非常紧密的社交关系，从纯电话联络网可能pick出一些欺诈用户，问题是每一个用户的最近6个月的通话记录动辄几千条，去重之后
	   也可能有几百条，可以猜测网络的特征是：以用户电话为中心向外辐射出很多电话，我们需要看的是，申请用户之间的联通关系，以及非平台用户电话的聚集关系，比如黑中介
	   的特征应该是很多平台用户的手机指向这一个非平台用户的手机，或者黑中介也可能是平台用户，有待探索

neo4j 图算法社区  https://neo4j.com/developer/graph-algorithms/#_installation

neo4j 结合spark  https://www.jianshu.com/p/8bef80b9acfc

neo4j社区 反欺诈项目  https://neo4j.com/graphgist/bank-fraud-detection

Comprehensive Guide to neo4j Graph Algorithms： https://go.neo4j.com/rs/710-RRC-335/images/Comprehensive-Guide-to-Graph-Algorithms-in-Neo4j-ebook-EN-US.pdf?_ga=2.52125801.1163163276.1541660433-1539277440.1541394781


社区发现(Community Detection)算法 利用了 Gephi 可视化  利用 GraphChi 进行海量数据图计算 https://blog.csdn.net/cleverlzc/article/details/39494957



algo 算法文档  https://neo4j.com/docs/graph-algorithms/current/algorithms/louvain/


1 社交网络图的聚类   https://blog.csdn.net/liveway6/article/details/78327108

图挖掘公开数据集 https://blog.csdn.net/wzgang123/article/details/51089521

网络表示以及网络嵌入学习论文和代码清单  https://blog.csdn.net/yimingsilence/article/details/80474046


查找两个节点之间的最短路径 跳数在10以内
MATCH (p1:Person {name:"Jonathan Lipnicki"}),(p2:Person{name:"Joel Silver"}), p=shortestpath((p1)-[*..10]-(p2)) RETURN p
查找两个节点之间的所有最短路径 跳数在10以内
MATCH (p1:Person {name:"Jonathan Lipnicki"}),(p2:Person{name:"Joel Silver"}), p=allshortestpaths((p1)-[*..10]-(p2)) RETURN p

删除所有
MATCH (a)-[r1]-() DELETE a,r1
清空数据两种方法：
一、用下列 Cypher 语句：
	match (n) detach delete n
二、
	1、停掉服务；
	2、删除 graph.db 目录；
	3、重启服务

   networkx与neo4j图算法的对比
   
六度分割理论，小世界理论：
   如果一个社区，或是一个子图的平均路径长度小于等于6的话，可以将这样一个子图定义为小世界网络
1 centrality  
   基于最短路径的中心度算法
   betweenness_centrality：网络中任意两个节点的所有最短路径，如果这些最短路径中有很多条都经过了某个节点，那么就认为这个节点的Betweenness Centrality高
   closeness_centrality：如果节点到图中其它节点的最短距离都很小，那么我们认为该节点的Closeness Centrality高，
                         从几何上更符合中心度的概念，因为到其它节点的平均最短距离最小，意味着这个节点从几何角度看是出于图的中心位置
						 大数据量下，经典的Closeness Centrality和Betwenness Centrality几乎都是不可计算的
						 
   harmonic_centrality：接近中心度的代替方案：计算的是一个点到其他所有点的距离的总和，这个总和越小就说明这个点到其他所有点的路径越短，也就说明这个点距离其他所有点越近
   
   利用中介度来发现社区
	常见做法：是从一个包含全部边的中介度，不断去掉具有最高中介度的边，直到图分裂为合适数目的连通分量为止。
	存在的局限性：不可能把一个节点分配到两个社区中，这导致每个节点最终都分配到各自社区中。
	
   基于反馈的中心度算法
   PageRank：
   
   
2 community_detection:

   聚类系数
   Clustering Coefficient：聚集系数是表示一个图形中节点聚集程度的系数，证据显示，在现实中的网络中，尤其是在特定的网络中，由于相对高密度连接点的关系，
                           节点总是趋向于建立一组严密的组织关系。在现实世界的网络，这种可能性往往比两个节点之间随机设立了一个连接的平均概率更大。
   Average Clustering Coefficient：全局聚类系数

   标签传播算法
   Label Propagation： 是一种半监督聚类算法；它在聚类算法中的特点是聚类速度快，但聚类结果随机。
					   1.为所有节点指定一个唯一的标签； 2.逐轮刷新所有节点的标签，直到达到收敛要求为止。对于每一轮刷新，节点标签刷新的规则如下: 
					   对于某一个节点，考察其所有邻居节点的标签，并进行统计，将出现个数最多的那个标签赋给当前节点。当个数最多的标签不唯一时，随机选一个。  
                       这里有两篇标签传播算法的改进： 
						1.Community Detection Using A Neighborhood strenghth driven 
						(http://arxiv.org/abs/1105.3264) 
						2.融入节点重要性和标签影响力的标签传播社区发现算法 
						(http://xwxt.sict.ac.cn/CN/abstract/abstract2843.shtml
	
	
	LOUVAIN——社交网络挖掘之大规模网络的社区发现算法  https://blog.csdn.net/xuanyuansen/article/details/68941507
	Louvain算法是基于模块度（Modularity）的社区发现算法，该算法在效率和效果上都表现比较好，
	并且能够发现层次性的社区结构，其优化的目标是最大化整个图属性结构（社区网络）的模块度。
	a、易于理解；b、非监督；和c、计算快速，最后我们可以得到的结果是层次化的社区发现结果。
	其中需要理解的核心点有：
	a、模块度Modularity的定义，这个定义是描述社区内紧密程度的值Q；
	b、模块度增量delta Q，即把一个孤立的点放入一个社区C后，计算Modularity的变化，其中计算过程的要点是，首先计算1个点的Modularity，
	和社区C的Modularity，再计算合并后新社区的Modularity，新社区的Modularity减去前两个Modularity就是delta Q。
	CALL algo.louvain.stream("John", "CONNECTED")
	YIELD nodeId, communities
	RETURN algo.getNodeById(nodeId).id AS libraries, communities
	
	强连通分量 SCC
	
	Triangles：环路检测
	
	并查集（Union-Find）是解决动态连通性问题的一类非常高效的数据结构
	CALL algo.unionFind.stream("John", "CONNECTED")
	YIELD nodeId,setId
	RETURN setId, collect(algo.getNodeById(nodeId)) AS libraries
	ORDER BY size(libraries) DESC

path finding
	
	allShortestPaths: 所有的最短路径
	CALL algo.allShortestPaths.stream("Todd")
	YIELD sourceNodeId, targetNodeId, distance
	WHERE sourceNodeId < targetNodeId
	RETURN algo.getNodeById(sourceNodeId).id AS source,
		   algo.getNodeById(targetNodeId).id AS target,
		   distance
	ORDER BY distance DESC
	LIMIT 10
	
	randomWalk：随机游走的基本思想是将图像看成由固定的顶点和边组成的连通带权无向图，RandomWalk从未标记顶点开始随机漫步，
	首次到达各类标记顶点的概率代表了未标记点归属于标记类的可能性，把最大的概率所在类的标签赋给未标记顶点，完成分割
	MATCH (source:Node {id: "John"})
	CALL algo.randomWalk.stream(id(source), 5, 1)
	YIELD nodeIds
	UNWIND algo.getNodesById(nodeIds) AS place
	RETURN place.id AS place
	
	spanningTree.minimum： 给定一个无向图，如果他的某个子图中，任意两个顶点都能互相连通并且是一棵树，那么这棵树就叫做生成树（spanning tree）.
    如果边上有权值，那么使得边权和最小的生成树叫做最小生成树（MST，Minimum Spanning Tree）
	MATCH (n:Node {id:"Amsterdam"})
	CALL algo.spanningTree.minimum("Node", "Node", "connected", id(n),
	  {write:true, writeProperty:"MINST"})
	YIELD loadMillis, computeMillis, writeMillis, effectiveNodeCount
	RETURN loadMillis, computeMillis, writeMillis, effectiveNodeCount

			   